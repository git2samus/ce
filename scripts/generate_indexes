#!/usr/bin/env python
import re, json
from collections import defaultdict


def _process_page(page, headers):
    lines = page.split('\n')

    for line in lines[1:]:
        if not line:
            break

        if len(headers) == 5:
            cols_re = r'^ *(\d+) *([A-Z]{3}) *(\d+) *(\d+) *(.*)$'
        else:
            cols_re = r'^ *(\d+) *([^ ]+) *([A-Z]{3}) *(\d+) *(\d+) *(.*)$'

        match = re.search(cols_re, line)
        if not match:
            continue

        yield dict(zip(headers, match.groups()))


process_mvd_page = lambda page: _process_page(page, (
    'Circuito', 'Serie', 'Desde', 'Hasta', 'Local y Direcci\xc3\xb3n'
))
process_dpt_page = lambda page: _process_page(page, (
    'Circuito', 'Urbano / Rural', 'Serie', 'Desde', 'Hasta', 'Localidad, Local y Direcci\xc3\xb3n'
))

def process_raws(*filenames):
    index = defaultdict(list)

    for filename in filenames:
        with open(filename) as raw:
            dpt = raw.readline().strip()

            if dpt == 'MONTEVIDEO':
                processor = process_mvd_page
            else:
                processor = process_dpt_page

            pages = raw.read().split('\x0C')
            rows = (
                row for page in pages for row in processor(page)
            )

            for row in rows:
                row['Departamento'] = dpt
                index[row['Serie']].append(row)

    for serie, values in index.items():
        print "Generating serie %s..." % serie
        with open('%s.json' % serie, 'w') as ix:
            json.dump(values, ix)


if __name__ == '__main__':
    import sys

    process_raws(*sys.argv[1:])
